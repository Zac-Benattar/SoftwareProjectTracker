{"ast":null,"code":"// import React from 'react';\n// import ReactDOM from 'react-dom/client';\n// import './index.css';\n\n// // To remember things, components use state\n// // React components have state by setting this.state in their constructors \n// // class Square extends React.Component {\n\n// //     // // Constructor of class -  initialises the state\n// //     // constructor(props) {\n// //     //   // Always need to call super when defining the constructor of a subclass\n// //     //   super(props);\n// //     //   this.state = {\n// //     //     value: null,\n// //     //   };\n// //     // }\n\n// //     render() {\n// //       return (\n// //         <button \n// //           className=\"square\" \n// //           onClick={() => this.props.onClick()}\n// //         >\n// //           {this.props.value}\n// //         </button>\n// //       );\n// //     }\n// //   }\n\n//   function Square(props) {\n//     return (\n//       <button className=\"square\" onClick={props.onClick}>\n\n//         {props.value}\n//       </button>\n//     )\n//   }\n\n//   // Passing a prop from parent Board --> child Square.\n//   // This is how information flows in React apps.\n\n//   // Store the game's state in this component rather that in each square.\n//   // Board componenet can tell each square what to display by passing a prop. \n//   class Board extends React.Component {\n//     // Initial state: contains array of 9 nulls corresponding to 9 squares.\n//     constructor(props) {\n//       super(props);\n//       this.state = {\n//         squares: Array(9).fill(null),\n//         xIsNext: true,\n//       };\n//     }\n\n//     handleClick(i) {\n//       const squares = this.state.squares.slice();\n//       // squares[i] = this.state.xIsNext ? 'X' : 'O';\n//       // this.setState({\n//       //   squares: squares,\n//       //   xIsNext: !this.state.xIsNext,\n//       // });\n\n//       if (calculateWinner(squares) || squares[i]) {\n//         return;\n//       }\n//       squares[i] = this.state.xIsNext ? 'X' : 'O';\n//       this.setState({\n//         squares: squares,\n//         xIsNext: !this.state.xIsNext,\n//       });\n//     }\n\n//     renderSquare(i) {\n//       return (\n//         <Square \n//           // Passing down two props from board to square\n//           value={this.state.squares[i]}\n\n//           // onClick is a function that Square can call when clicked\n//           onClick={() => this.handleClick(i)}\n\n//         />\n//       );\n//     }\n\n//     render() {\n//       // const status = 'Next player: ' + \n//       // (this.state.xIsNext ? 'X': 'O');\n\n//       const winner = calculateWinner(this.state.squares);\n//       let status;\n//       if (winner) {\n//         status = 'Winner: ' + winner;\n//       } else {\n//         status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n//       }\n\n//       return (\n//         <div>\n//           <div className=\"status\">{status}</div>\n//           <div className=\"board-row\">\n//             {this.renderSquare(0)}\n//             {this.renderSquare(1)}\n//             {this.renderSquare(2)}\n//           </div>\n//           <div className=\"board-row\">\n//             {this.renderSquare(3)}\n//             {this.renderSquare(4)}\n//             {this.renderSquare(5)}\n//           </div>\n//           <div className=\"board-row\">\n//             {this.renderSquare(6)}\n//             {this.renderSquare(7)}\n//             {this.renderSquare(8)}\n//           </div>\n//         </div>\n//       );\n//     }\n//   }\n\n//   class Game extends React.Component {\n//     render() {\n//       return (\n//         <div className=\"game\">\n//           <div className=\"game-board\">\n//             <Board />\n//           </div>\n//           <div className=\"game-info\">\n//             <div>{/* status */}</div>\n//             <ol>{/* TODO */}</ol>\n//           </div>\n//         </div>\n//       );\n//     }\n//   }\n\n//   // ========================================\n\n//   const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n//   root.render(<Game />);\n\n//   function calculateWinner(squares) {\n//     const lines = [\n//       [0, 1, 2],\n//       [3, 4, 5],\n//       [6, 7, 8],\n//       [0, 3, 6],\n//       [1, 4, 7],\n//       [2, 5, 8],\n//       [0, 4, 8],\n//       [2, 4, 6],\n//     ];\n//     for (let i = 0; i < lines.length; i++) {\n//       const [a, b, c] = lines[i];\n//       if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n//         return squares[a];\n//       }\n//     }\n//     return null;\n//   }","map":{"version":3,"names":[],"sources":["C:/Users/loisp/Documents/GitHub/SoftwareProjectTracker/mysite/react_tutorial/my-app/src/index.js"],"sourcesContent":["// import React from 'react';\r\n// import ReactDOM from 'react-dom/client';\r\n// import './index.css';\r\n\r\n// // To remember things, components use state\r\n// // React components have state by setting this.state in their constructors \r\n// // class Square extends React.Component {\r\n\r\n// //     // // Constructor of class -  initialises the state\r\n// //     // constructor(props) {\r\n// //     //   // Always need to call super when defining the constructor of a subclass\r\n// //     //   super(props);\r\n// //     //   this.state = {\r\n// //     //     value: null,\r\n// //     //   };\r\n// //     // }\r\n\r\n// //     render() {\r\n// //       return (\r\n// //         <button \r\n// //           className=\"square\" \r\n// //           onClick={() => this.props.onClick()}\r\n// //         >\r\n// //           {this.props.value}\r\n// //         </button>\r\n// //       );\r\n// //     }\r\n// //   }\r\n\r\n//   function Square(props) {\r\n//     return (\r\n//       <button className=\"square\" onClick={props.onClick}>\r\n\r\n//         {props.value}\r\n//       </button>\r\n//     )\r\n//   }\r\n  \r\n//   // Passing a prop from parent Board --> child Square.\r\n//   // This is how information flows in React apps.\r\n\r\n//   // Store the game's state in this component rather that in each square.\r\n//   // Board componenet can tell each square what to display by passing a prop. \r\n//   class Board extends React.Component {\r\n//     // Initial state: contains array of 9 nulls corresponding to 9 squares.\r\n//     constructor(props) {\r\n//       super(props);\r\n//       this.state = {\r\n//         squares: Array(9).fill(null),\r\n//         xIsNext: true,\r\n//       };\r\n//     }\r\n\r\n//     handleClick(i) {\r\n//       const squares = this.state.squares.slice();\r\n//       // squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n//       // this.setState({\r\n//       //   squares: squares,\r\n//       //   xIsNext: !this.state.xIsNext,\r\n//       // });\r\n\r\n//       if (calculateWinner(squares) || squares[i]) {\r\n//         return;\r\n//       }\r\n//       squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n//       this.setState({\r\n//         squares: squares,\r\n//         xIsNext: !this.state.xIsNext,\r\n//       });\r\n//     }\r\n\r\n//     renderSquare(i) {\r\n//       return (\r\n//         <Square \r\n//           // Passing down two props from board to square\r\n//           value={this.state.squares[i]}\r\n\r\n//           // onClick is a function that Square can call when clicked\r\n//           onClick={() => this.handleClick(i)}\r\n    \r\n//         />\r\n//       );\r\n//     }\r\n  \r\n//     render() {\r\n//       // const status = 'Next player: ' + \r\n//       // (this.state.xIsNext ? 'X': 'O');\r\n\r\n\r\n//       const winner = calculateWinner(this.state.squares);\r\n//       let status;\r\n//       if (winner) {\r\n//         status = 'Winner: ' + winner;\r\n//       } else {\r\n//         status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n//       }\r\n  \r\n//       return (\r\n//         <div>\r\n//           <div className=\"status\">{status}</div>\r\n//           <div className=\"board-row\">\r\n//             {this.renderSquare(0)}\r\n//             {this.renderSquare(1)}\r\n//             {this.renderSquare(2)}\r\n//           </div>\r\n//           <div className=\"board-row\">\r\n//             {this.renderSquare(3)}\r\n//             {this.renderSquare(4)}\r\n//             {this.renderSquare(5)}\r\n//           </div>\r\n//           <div className=\"board-row\">\r\n//             {this.renderSquare(6)}\r\n//             {this.renderSquare(7)}\r\n//             {this.renderSquare(8)}\r\n//           </div>\r\n//         </div>\r\n//       );\r\n//     }\r\n//   }\r\n  \r\n//   class Game extends React.Component {\r\n//     render() {\r\n//       return (\r\n//         <div className=\"game\">\r\n//           <div className=\"game-board\">\r\n//             <Board />\r\n//           </div>\r\n//           <div className=\"game-info\">\r\n//             <div>{/* status */}</div>\r\n//             <ol>{/* TODO */}</ol>\r\n//           </div>\r\n//         </div>\r\n//       );\r\n//     }\r\n//   }\r\n  \r\n//   // ========================================\r\n  \r\n//   const root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\n//   root.render(<Game />);\r\n\r\n\r\n//   function calculateWinner(squares) {\r\n//     const lines = [\r\n//       [0, 1, 2],\r\n//       [3, 4, 5],\r\n//       [6, 7, 8],\r\n//       [0, 3, 6],\r\n//       [1, 4, 7],\r\n//       [2, 5, 8],\r\n//       [0, 4, 8],\r\n//       [2, 4, 6],\r\n//     ];\r\n//     for (let i = 0; i < lines.length; i++) {\r\n//       const [a, b, c] = lines[i];\r\n//       if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n//         return squares[a];\r\n//       }\r\n//     }\r\n//     return null;\r\n//   }\r\n  \r\n  "],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}